
# Git Aliases
alias gs="git status"
alias ga="git add"
alias gaa="git add ."
alias gd="git diff"

alias gl-graph="git log --graph --full-history --all --color --decorate=short"
alias gl="git log --pretty=format:\"%h - %an, %ar : %s\""
alias gcl="git config --local -e" #open up local config file for editing
alias gcg="git config --global -e"

alias g-stash-apply="git stash apply stash@{0}"

alias g-reset-commitandfiles="git reset --hard HEAD~1"  
alias g-reset-commit="git reset --soft HEAD^1"
alias g-reset-head="git reset --hard HEAD"

alias gbp="git push origin HEAD"
alias g-clean="git clean -f -d"

#git functions
gc() {
    git commit -m "${1}"
}

gca() {
    git add .; 
    git commit -am "${1}"
}

g-rename-current-branch() {
    echo "What is the new name of the branch?"
    read NEW_BRANCH_NAME
    git branch -m $NEW_BRANCH_NAME
}

g-ignore-filereset() {
    git rm --cached -r $1
}

g-reset-stage() {
    git reset HEAD $1
}

g-discard-by-file() {
    echo What file would you like to discard the updates for?
    read -e FILE_PATH_TO_DISCARD
    echo git checkout -- $FILE_PATH_TO_DISCARD
    git checkout -- $FILE_PATH_TO_DISCARD
}

g-restore-by-file() {
    echo What file would you like to restore from staged?
    read -e FILE_PATH_TO_RESTORE
    echo git restore --staged $FILE_PATH_TO_RESTORE
    git restore --staged $FILE_PATH_TO_RESTORE
}


g-reset-last-commit-to-staged() {
    echo "git reset --soft HEAD~1"
    git reset --soft HEAD~1
}

#git checkout main and delete current branch
g-delete-current() {
    echo What branch would you like to checkout?
    read BRANCH_TO_CHECKOUT
    echo $BRANCH_TO_CHECKOUT
    currentBranchToDelete=$(git branch --show-current)
    echo "current branch: $currentBranchToDelete"
    echo "git checkout $BRANCH_TO_CHECKOUT"
    git checkout $BRANCH_TO_CHECKOUT
    echo "Locally deleting: $currentBranchToDelete"
    git branch -D $currentBranchToDelete
}

g-update-remote() {
    echo What is the new remote?
    read newRemote
    git remote rm origin
    git remote add origin $newRemote
    git config master.remote origin
    git config master.merge refs/heads/master
}

g-quick-commit-push() {
    git add .;
    git commit -am "$1";
    gbp;
}

show-branches() {
    git branch
}

g-delete-all-local-branches-but-master() {
    git branch | grep -v "master" | xargs git branch -D 
}

g-delete-all-remote-branches-but-master-main-develop() {
    git branch -r | grep 'origin' | grep -v 'master$' | grep -v 'main$' | grep -v 'develop$' | grep -v HEAD | cut -d/ -f2- | while read line; do git push origin :heads/$line; done;    
}

g-delete-remoteandlocal-by-branch() {
    echo "What is the branch name?"
    read branchName
    echo "deleting branch locally"
    echo "git branch -D '$branchName'"
    git branch -D "$branchName"
    echo "deleting branch from origin"
    echo "git push -d origin '$branchName'"
    git push -d origin "$branchName"

}

g-action-init() {
    # replace $1 with a unique feature branch identifier
    git checkout -b "feature-$1";
    touch "feature-$1";
    git add -A;
    git commit -m "changes-$1";
    git push -u origin feature-$1;
}

g-repo-branch-structure() {
    # git checkout -b "production";
    # gbp;
    git checkout -b "staging";
    gbp;
    git checkout -b "regression";
    gbp;
}


