#SALESFORCE DX CLI ALIASES
alias dxaliaslist="sfdx force:alias:list"
alias dxorgopen="sfdx force:org:open"
alias dxorglist="sfdx force:org:list"
alias dxdevhubpackagelist="sfdx force:package:list"
alias dxlocalpackagelist="sfdx force:package:installed:list"

dxopen() {
    sfdx force:org:open $1
}

dxset-username() {
    sfdx config:set --defaultusername $1
}

dxset-D() {
    sfdx config:set defaultdevhubusername=$1
}

dxlimits() {
    sfdx force:limits:api:display -u $1
}

dxcreate-scratch() {
    #this alias function assumes there is a configured alias connection within the local git config file under 
    # aliasAssociatedUserName=$(git config sf-va-dev-environment.alias)
    echo How many days\(--durationdays\) will this scratch org Exist \(7-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername
    sfdx force:org:create --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername

}

dxcreate-package() {
    echo What is the alias/username\(--targetdevhubusername\) for the ORG?
    read targetdevhubusername
    echo What is the package Name?\(--name\)?
    read packageName
    echo What is the package Type?\(--packagetype\)?
    read packageType
    echo What is the package path?\(--path\)?
    read path
    echo What is the package description?\(--description\)?
    read description
    echo sfdx force:package:create --targetdevhubusername=$targetdevhubusername --name $packageName --packagetype $packageType --path $path --description "$description" --nonamespace
    sfdx force:package:create --targetdevhubusername=$targetdevhubusername --name $packageName --packagetype $packageType --path $path --description "$description" --nonamespace
}

dxcreate-package-version() {
    echo What is the alias/username\(--targetdevhubusername \| -v\) for the ORG?
    read targetdevhubusername
    echo What is the package alias being versioned?\(--package \| -p\)?
    read packageNameAlias
    echo What is the package installation Key?\(--installationkey \| -k\)?
    read installationKey
    echo sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkey $installationKey 
    sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkey $installationKey
}

dxcreate-data-user() {
    # Required fields are missing: [Alias, TimeZoneSidKey, LocaleSidKey, EmailEncodingKey, ProfileId, LanguageLocaleKey
    echo First Name?
    read firstName
    echo Last Name?
    read lastName
    echo Email?
    read email
    username="${email}un"
    echo sfdx force:data:record:create --sobjecttype User --perflog --json --values=="FirstName='$firstName' \
         LastName='$lastName' \
         Alias='$alias' \
         Email='$email' \
         Username='$username' \
         Nickname='$alias' "
    sfdx force:data:record:create --sobjecttype User --perflog --json --values="FirstName='$firstName' LastName='$lastName' Email='$email' Username='$username'"

}

dx-quickdeploy-permsets-dx() {
    echo ORG username or alias to deploy to?
    read targetusername
    # /c/git/jdschleicher/bashcuts/bashcuts_by_cli/
    echo sfdx force:source:deploy --sourcepath "/c/git/QUICKMETADATA/permissionsets/dx" --targetusername $targetusername
    sfdx force:source:deploy --sourcepath "/c/git/QUICKMETADATA/permissionsets/dx" --targetusername $targetusername
}


dxpull() {
    sfdx force:source:pull -u $1
}

dxpush() {
    sfdx force:source:push
}


dxgitconfigalias(){
    git config sf-va-dev-environment.alias $1
}

dxaliasdelete() {
    sfdx force:alias:set $1=
}

#sfdx Salesforce DX Aliases Functions
lwc-debug() {
    aliasAssociatedUserName=$(git config sf-va-dev-environment.user-name-value)
    alias=$(git config sf-va-dev-environment.alias)
    sfdx force:data:record:update --sobjecttype=User --where="Username="$aliasAssociatedUserName"" --values="UserPreferencesUserDebugModePref=$1"
}

dxauth-custom() {
    echo What is the custom url\(--instanceurl\)?
    read customUrl
    echo What is the alias\(--setalias\) for this custom url authorization?
    read alias
    echo sfdx auth:web:login --setalias $alias --instanceurl "$customUrl"
    sfdx auth:web:login --setalias $alias --instanceurl "$customUrl"
}

dxauth() {
    sfdx auth:web:login --setalias $1 
}


dxscan() {
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    resultsDirectory=scanresults/datetime_"$dateAndTime"
    mkdir -p "$resultsDirectory"
    sfdx scanner:run -o "$resultsDirectory"/scannerresults_"$dateAndTime".csv -f csv -t=$1
}

dxtest-m () {
    # param in format : ClassName.MethodName
    sfdx force:apex:test:run --resultformat human --loglevel error --tests $1
}

dxtest-m-cc () {
    sfdx force:apex:test:run --resultformat human --loglevel error --tests $1 --codecoverage
}

dxtest-s () {
    sfdx force:apex:test:run --resultformat human --loglevel error -s $1
}

dxtest-s-cc () {
    sfdx force:apex:test:run --resultformat human --loglevel error -s $1 --codecoverage
}

dxtest-c () {
    sfdx force:apex:test:run --classnames \"$1\" --loglevel error 
}

dxtest-c-cc () {
    sfdx force:apex:test:run --classnames \"$1\" --resultformat human --codecoverage --loglevel error 
}

dxtest-r () {
    sfdx force:apex:test:report -i $1
}

dxcc () {
    sfdx force:data:soql:query --query  "SELECT NumLinesCovered, NumLinesUncovered, ApexClassOrTrigger.Name FROM ApexCodeCoverage WHERE ApexClassOrTrigger.Name in ('$1')" --usetoolingapi
}

dxqtflag () {
    sfUserNameFromGitConfig=$()
    userId=$(sfdx force:data:soql:query --query "SELECT Id FROM User WHERE LogType='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE'" --usetoolingapi)
    results=$(sfdx force:data:soql:query --query "SELECT debuglevelid FROM TraceFlag WHERE LogType='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE'" --usetoolingapi)
    # sfdx force:data:soql:query --query "SELECT ID FROM TraceFlag LIMIT 10" 
    # tracedenttiyid is user
}

dxlogstart () {
    # yest=$(date --date="today + 23 hours" +"%d/%m/%Y/%h/%mm" +"%Y-%m-%dT%H:%M:%SZ")
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    funcYest="$(dxqtflag)"
    echo $funcYest
    sfdx force:data:record:update --sobjecttype TraceFlag --sobjectid $1 --values StartDate='' ExpirationDate='"$notQuite24Hours"' --usetoolingapi --json --loglevel fatal
    #logtype=DEVELOPER_LOG
    #2do
    #create trace flag for all finest
    # sfdx force:data:record:update --sobjecttype DebugLevel --sobjectid 7dlt0000000blJTAAY --values ApexCode=FINEST Visualforce=FINER --usetoolingapi --json --loglevel fatal
}

dxq() {
    sfdx force:data:soql:query -q "$1"
}

dxq-csv() {
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    queryResultsDirectory=queryResults
    mkdir -p "$queryResultsDirectory"
    fileName="$queryResultsDirectory"/"$dateAndTime".csv
    results=$(sfdx force:data:soql:query -q "$1" -r csv) 
    echo "$results" > "$fileName"
}

dx-getfields() {
    sfdx shane:object:fields:describe -o $1
}



# 10:14:45.203 SFDX: Turn On Apex Debug Log for Replay Debugger 
# Starting SFDX: Turn On Apex Debug Log for Replay Debugger

# 10:14:54.138 sfdx force:data:soql:query --query SELECT id, logtype, startdate, expirationdate, debuglevelid, debuglevel.apexcode, debuglevel.visualforce FROM TraceFlag WHERE logtype='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE' --usetoolingapi --json --loglevel fatal
# {
#   "status": 0,
#   "result": {
#     "size": 1,
#     "totalSize": 1,
#     "done": true,
#     "queryLocator": null,
#     "entityTypeName": "TraceFlag",
#     "records": [
#       {
#         "attributes": {
#           "type": "TraceFlag",
#           "url": "/services/data/v50.0/tooling/sobjects/TraceFlag/7tfr0000000PFukAAG"
#         },
#         "Id": "7tfr0000000PFukAAG",
#         "LogType": "DEVELOPER_LOG",
#         "StartDate": null,
#         "ExpirationDate": "2021-01-22T15:17:58.000+0000",
#         "DebugLevelId": "7dlt0000000blJTAAY",
#         "DebugLevel": {
#           "attributes": {
#             "type": "DebugLevel",
#             "url": "/services/data/v50.0/tooling/sobjects/DebugLevel/7dlt0000000blJTAAY"
#           },
#           "ApexCode": "FINEST",
#           "Visualforce": "FINER"
#         }
#       }
#     ]
#   }
# }
# 10:15:00.649 sfdx force:data:soql:query --query SELECT id, logtype, startdate, expirationdate, debuglevelid, debuglevel.apexcode, debuglevel.visualforce FROM TraceFlag WHERE logtype='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE' --usetoolingapi --json --loglevel fatal
#  ended with exit code 0

# Starting sfdx force:data:record:update --sobjecttype DebugLevel --sobjectid 7dlt0000000blJTAAY --values ApexCode=FINEST Visualforce=FINER --usetoolingapi --json --loglevel fatal

# 10:15:00.683 sfdx force:data:record:update --sobjecttype DebugLevel --sobjectid 7dlt0000000blJTAAY --values ApexCode=FINEST Visualforce=FINER --usetoolingapi --json --loglevel fatal
# {
#   "status": 0,
#   "result": {
#     "id": "7dlt0000000blJTAAY",
#     "success": true,
#     "errors": []
#   }
# }
# 10:15:07.12 sfdx force:data:record:update --sobjecttype DebugLevel --sobjectid 7dlt0000000blJTAAY --values ApexCode=FINEST Visualforce=FINER --usetoolingapi --json --loglevel fatal
#  ended with exit code 0

# Starting sfdx force:data:record:update --sobjecttype TraceFlag --sobjectid 7tfr0000000PFukAAG --values StartDate='' ExpirationDate='Fri, 22 Jan 2021 15:45:07 GMT' --usetoolingapi --json --loglevel fatal

# 10:15:07.46 sfdx force:data:record:update --sobjecttype TraceFlag --sobjectid 7tfr0000000PFukAAG --values StartDate='' ExpirationDate='Fri, 22 Jan 2021 15:45:07 GMT' --usetoolingapi --json --loglevel fatal
# {
#   "status": 0,
#   "result": {
#     "id": "7tfr0000000PFukAAG",
#     "success": true,
#     "errors": []
#   }
# }
# 10:15:15.237 sfdx force:data:record:update --sobjecttype TraceFlag --sobjectid 7tfr0000000PFukAAG --values StartDate='' ExpirationDate='Fri, 22 Jan 2021 15:45:07 GMT' --usetoolingapi --json --loglevel fatal
#  ended with exit code 0

# 10:15:15.238 SFDX: Turn On Apex Debug Log for Replay Debugger 
#  ended with exit code 0


