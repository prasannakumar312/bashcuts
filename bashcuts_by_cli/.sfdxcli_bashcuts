#SALESFORCE DX CLI ALIASES
alias dxaliaslist="time sfdx force:alias:list"

dx-open() {
    echo sfdx force:org:open 
    time sfdx force:org:open
}

dx-open-devconsole() {
    echo sfdx force:org:open --path "_ui/common/apex/debug/ApexCSIPage"
    time sfdx force:org:open --path "_ui/common/apex/debug/ApexCSIPage"
}

dx-open-by-alias() {
    echo What is the username or alias of the org to open? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo sfdx force:org:open --targetusername $TARGET_USERNAME
    time sfdx force:org:open --targetusername $TARGET_USERNAME
}

dx-open-devconsole-by-alias() {
    echo What is the username or alias of the org to open? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo sfdx force:org:open --path "_ui/common/apex/debug/ApexCSIPage"
    time sfdx force:org:open --path "_ui/common/apex/debug/ApexCSIPage"
}

dx-open-local-user-sfdx() {
    echo start ~/.sfdx
    start ~/.sfdx
}

dx-open-local-appdata-sfdx() {
   start ~/AppData/Local/sfdx
}

dx-open-local-sfdx-log () {
    echo code ~/.sfdx/sfdx.log
    code ~/.sfdx/sfdx.log
}

dx-save-plugin-metadata() {
    echo SFDX_MDAPI_TEMP_DIR=/users/myName/myDXProject/metadata
    SFDX_MDAPI_TEMP_DIR=/users/myName/myDXProject/metadata
}

dx-show-orgs() {
    echo sfdx force:org:list
    time sfdx force:org:list
}



alias dxdevhubpackagelist="time sfdx force:package:list"
alias dxlocalpackagelist="time sfdx force:package:installed:list"
alias dx-show-plugins="sfdx plugins --core"
alias dxcleanscratch="time sfdx force:org:list --clean"

dx-docs() {
    start https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference.htm
}

dx-docs-force() {
    start https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force.htm
}

dx-docs-force-apex() {
    start https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_force_apex.htm#cli_reference_force_apex
}

dx-docs-config() {
    start https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_config.htm
}

dx-docs-scratch-org-features() {
    start https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file_config_values.htm
}

dx-open-default() {
    echo sfdx force:org:open
    time sfdx force:org:open
}

dx-show-packages() {
    echo What is the alias/username of the DevHub \(--targetdevhubusername\)?
    read devhub
    echo sfdx force:package:list --targetdevhubusername $devhub
    time sfdx force:package:list --targetdevhubusername $devhub
}

dx-install-package-noprompt() {
    echo What is the alias/username of the org deploying to \(--targetusername, -u\)?
    read TARGET_ALIAS
    echo What is the Subscriber Package Version Id \( --package, -p \)?
    read PACKAGE_VERSION_ID
    echo sfdx force:package:install --targetusername $TARGET_ALIAS --package $PACKAGE_VERSION_ID --noprompt --wait 10
    time sfdx force:package:install --targetusername $TARGET_ALIAS --package $PACKAGE_VERSION_ID --noprompt --wait 10
}

dx-install-package-web() {
    echo What is the custom url of the install destination org?
    read customUrl
    echo What is the Subscriber Package Id?
    read packageId
    packageUrlSegments="/packaging/installPackage.apexp?p0="
    echo "${customUrl}${packageUrlSegments}${packageId}"
    start "${customUrl}${packageUrlSegments}${packageId}"
}

dx-install-package-production() {
    echo What is the alias/username of the org deploying to \(--targetusername, -u\)?
    read TARGET_ALIAS
    echo What is the Subscriber Package Version Id \( --package, -p \)?
    read PACKAGE_VERSION_ID
    echo sfdx force:package:install --targetusername $TARGET_ALIAS --package $PACKAGE_VERSION_ID --apexcompile --wait 45
    time sfdx force:package:install --targetusername $TARGET_ALIAS --package $PACKAGE_VERSION_ID --apexcompile --wait 45

}

dx-apex-by-alias-and-file() {
    echo What is the alias/username of the org running apex against \(--targetusername, -u\)?
    read TARGET_ALIAS
    echo What is the file containing apex to run \(--apexcodefile , -f\)?
    read -e FILE
    echo sfdx force:apex:execute --targetusername $TARGET_ALIAS --apexcodefile $FILE
    time sfdx force:apex:execute --targetusername $TARGET_ALIAS --apexcodefile $FILE
}

dx-promote-package() {
    # time sfdx force:package:version:promote
    echo What is the alias/username of the DevHub \(--targetdevhubusername, -v \)?
    read DEVHUB_ALIAS
    echo What is the 04t package Id to promote \( --package, -p \)
    read PACKAGE_04T_ID
    echo sfdx force:package:version:promote --targetdevhubusername $DEVHUB_ALIAS --package $PACKAGE_04T_ID --noprompt
    time sfdx force:package:version:promote --targetdevhubusername $DEVHUB_ALIAS --package $PACKAGE_04T_ID --noprompt
}

dx-retrieve-manifest() {

    echo What is the alias/username of the org deploying to \(-u \| --targetusername\)?
    read ALIAS
    echo What is the package.xml directory path \( -x \| --manifest\)?
    read MANIFEST_PATH
    echo sfdx force:source:retrieve --manifest $MANIFEST_PATH --targetusername $ALIAS
    time sfdx force:source:retrieve --manifest $MANIFEST_PATH --targetusername $ALIAS

}

dx-retrieve-one() {

    echo What is the alias/username of the org retrieving from \(-u \| --targetusername\)?
    read ALIAS
    echo What is the metadata type you are retrieving? \( -x \| --manifest\)?
    read METADATA_TYPE
    echo What is the API name of the metadata you are retrieving? \( -m \| --metadata\)?
    read METADATA_API_NAME
    echo sfdx force:source:retrieve --metadata=\"$METADATA_TYPE:$METADATA_API_NAME\" --targetusername $ALIAS
    time sfdx force:source:retrieve --metadata "$METADATA_TYPE:$METADATA_API_NAME" --targetusername $ALIAS

}

dx-show-package-versions-for-specific-package() {
    echo What is the alias/username of the DevHub \(--targetdevhubusername\)?
    read devhub
    echo What is the package alias\/id? \( --packages, p \)
    read PACKAGE_ALIAS
    echo sfdx force:package:version:list --targetdevhubusername $devhub --packages $PACKAGE_ALIAS
    time sfdx force:package:version:list --targetdevhubusername $devhub --packages $PACKAGE_ALIAS
}

dx-show-package-version-component-viewer() {
    echo What is the alias/username of the DevHub \(--targetdevhubusername\)?
    read DEVHUB
    echo What is the package version to review? 
    read PACKAGE_VERSION_ID
    webpage="https://${DEVHUB}.lightning.force.com/packagingSetupUI/ipLanding.app?apvId=${PACKAGE_VERSION_ID}"
    echo start $webpage
    start $webpage
}

dx-show-all-package-versions() {
    echo What is the alias/username of the DevHub \(--targetdevhubusername\)?
    read devhub
    echo sfdx force:package:version:list --targetdevhubusername $devhub 
    time sfdx force:package:version:list --targetdevhubusername $devhub 
}

dx-plugin-install() {
    # sfdx plugins:install texei-sfdx-plugin
    echo What is the alias/username of the DevHub \(--targetdevhubusername\)?
    read targetdevhubusername
    echo What is the package Name?\(--name\)?
    read packageName
    echo What is the package Type?\(--packagetype\)?
    read packageType
    echo What is the package path?\(--path\)?
    read path
    echo What is the package description?\(--description\)?
    read description
    echo sfdx force:package:create --targetdevhubusername=$targetdevhubusername --name $packageName --packagetype $packageType --path $path --description "$description" --nonamespace
    time sfdx force:package:
}

dx-open-local-plugins-packagejson() {
    code ~/AppData/Local/sfdx/package.json
}

dx-texei-install-dependencies() {
    echo What is the alias/username of the DevHub \(--targetdevhubusername, -v\)?
    read DEVHUB_ALIAS
    echo What is the alias/username of the scratch org \(--targetusername, -u \)?
    read SCRATCH_ORG_ALIAS
    echo sfdx texei:package:dependencies:install --targetusername $SCRATCH_ORG_ALIAS --targetdevhubusername $DEVHUB_ALIAS --noprompt -w 120
    time sfdx texei:package:dependencies:install --targetusername $SCRATCH_ORG_ALIAS --targetdevhubusername $DEVHUB_ALIAS --noprompt -w 120
}

dx-texei-data-import() {
    echo What is the alias/username of the org to import data into \(--targetusername, -u \)?
    read TARGET_ORG
    echo What is the directory where the data to import is located \(--inputdir, -d\)?
    read -e DATA_PATH
    echo sfdx texei:data:import --inputdir $DATA_PATH --targetusername $TARGET_ORG
    time sfdx texei:data:import --inputdir $DATA_PATH --targetusername $TARGET_ORG
}



dxlogout() {
   sfdx auth:logout --targetusername $1
}

dxlogout-all() {
   sfdx auth:logout --all --noprompt
}


dx-config-set-local-username() {
    sfdx config:set defaultusername=$1
}

dx-set-devhub-alias() {
    sfdx config:set defaultdevhubusername=$1
}

dx-org-verbose() {
    echo sfdx force:org:display -u $1 --verbose
    time sfdx force:org:display -u $1 --verbose
}

dx-limits() {
    time sfdx force:limits:api:display -u $1
}

dx-show-config() {
    sfdx config:list
}

dx-data-load() {
  echo What path/plan \(p \| --plan \)?
  read path
  echo What alias/username \(--targetusername \| -u \) will this data be uploaded to?
  read alias
  echo sfdx force:data:tree:import -plan $path --targetusername $alias
  time sfdx force:data:tree:import --plan $path --targetusername $alias
}

dx-create-scratch() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --loglevel trace
    time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --loglevel trace
}

dx-create-scratch-non-default() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --loglevel trace
    time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --loglevel trace
}

dx-create-scratch-and-open() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --loglevel trace
    time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --loglevel trace
    dx-open
}

dx-create-scratch-and-push() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --wait 5 --loglevel ERROR
    command_result=$(time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays 1 --setdefaultusername --wait 5 --loglevel ERROR)
    echo $command_result
    if [[ $command_result =~ "Successfully" ]]
    then
        echo "PUSHING CODEBASE TO $alias"
        echo sfdx force:source:push --targetusername $alias --wait 10
        time sfdx force:source:push --targetusername $alias --wait 10 
    else 
        echo "The scratch org creation failed"
    fi

}

dx-create-scratch-install-and-push() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --wait 5 --loglevel ERROR
    command_result=$(time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays 1 --setdefaultusername --wait 5 --loglevel ERROR)
    echo $command_result
    if [[ $command_result =~ "Successfully" ]]
    then
        echo "INSTALLING DEPENDENCIES"
        sfdx texei:package:dependencies:install -u $alias -v $devHub --noprompt -w 120
        echo "PUSHING CODEBASE TO $alias"
        echo sfdx force:source:push --targetusername $alias --wait 10
        time sfdx force:source:push --targetusername $alias --wait 10 
    else 
        echo "The scratch org creation failed"
    fi
}

dx-create-scratch-dependencies-install-package() {
    echo What DevHub will this Scratch Org be created from\(--targetdevhubusername \|-v\)?
    read devHub
    echo How many days\(--durationdays\) will this scratch org Exist \(1-30\)?
    read durationDays
    echo What will the scratch org\'s alias\(--setalias\) be?
    read alias
    echo sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays $durationDays --setdefaultusername --wait 5 --loglevel ERROR
    command_result=$(time sfdx force:org:create --targetdevhubusername $devHub --definitionfile config/project-scratch-def.json --setalias $alias --durationdays 1 --setdefaultusername --wait 5 --loglevel ERROR)
    echo $command_result
    if [[ $command_result =~ "Successfully" ]]
    then
        echo "INSTALLING  DEPENDENCIES FROM sfdx-project.json TO $alias"
        echo sfdx texei:package:dependencies:install --targetusername $alias --targetdevhubusername $devHub --noprompt -w 120
        dependencies_command_result=$(sfdx texei:package:dependencies:install --targetusername $alias --targetdevhubusername $devHub --noprompt -w 120)
        echo $dependencies_command_result

    else 
        echo "The scratch org creation failed"
    fi

}


dx-convert-mdapi-to-source-directory() {
    echo What directory contains the mdapi format metadata to convert? \( --rootdir \| -r \)?
    read -e SOURCE_DIR
    echo What directory will the converted source format be stored \( --outputdir \| -d \)?
    read -e OUTPUT_DIR
    echo sfdx force:mdapi:convert --rootdir $SOURCE_DIR --outputdir $OUTPUT_DIR
    time sfdx force:mdapi:convert --rootdir $SOURCE_DIR --outputdir $OUTPUT_DIR
}

dx-convert-mdapi-to-source-file() {
    echo What filepath to convert? \( --metadatapath \| -p \)?
    read -e PATH
    echo What directory will the converted source format be stored \( --outputdir \| -d \)?
    read -e OUTPUT_DIR
    echo sfdx force:mdapi:convert --metadatapath $PATH --outputdir $OUTPUT_DIR
    time sfdx force:mdapi:convert --metadatapath $PATH --outputdir $OUTPUT_DIR
}


dx-convert-source-to-mdapi() {
    echo What directory will the converted mdapi format be stored \( --outputdir \| -d \)?
    read OUTPUT_DIR
    echo What directory contains the source format metadata to convert? \( --rootdir \| -r \)?
    read SOURCE_DIR
    echo sfdx force:source:convert --rootdir $SOURCE_DIR --outputdir $OUTPUT_DIR
    time sfdx force:source:convert --rootdir $SOURCE_DIR --outputdir $OUTPUT_DIR
    #   $ time sfdx force:source:convert -r path/to/source
    #   $ time sfdx force:source:convert -r path/to/source -d path/to/outputdir -n 'My Package
}

dx-create-project() {
    # -u, --targetusername=targetusername
    echo What is the name \(--projectname \|-n \) of the project? 
    read projectName
    echo What is the template \(-t \| --template \) of the project? \( can be standard, empty, analytics \)
    read template
    echo sfdx force:project:create --projectname $projectName --template $template
    time sfdx force:project:create --projectname $projectName --template $template
    
}

dx-create-package() {
    echo What is the DevHub alias/username\(--targetdevhubusername\) for the ORG?
    read targetdevhubusername
    echo What is the package Name?\(--name\)?
    read packageName
    echo What is the package Type?\(--packagetype Managed\|Unlocked\)?
    read packageType
    echo What is the package path?\(--path\)?
    read -e path
    echo What is the package description?\(--description\)?
    read description
    echo sfdx force:package:create --targetdevhubusername=$targetdevhubusername --name $packageName --packagetype $packageType --path $path --description "$description" --nonamespace
    time sfdx force:package:create --targetdevhubusername=$targetdevhubusername --name $packageName --packagetype $packageType --path $path --description "$description" --nonamespace
}

dx-create-package-version-skipvalidation() {
    echo What is the alias/username\(--targetdevhubusername \| -v\) for the ORG?
    read targetdevhubusername
    echo What is the package alias being versioned?\(--package \| -p\)?
    read packageNameAlias
    echo sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkeybypass --skipvalidation --wait 120
    time sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkeybypass --skipvalidation --wait 120
}

dx-create-package-version-with-version-number() {
    echo What is the alias/username\(--targetdevhubusername \| -v\) for the ORG?
    read targetdevhubusername
    echo What is the package alias being versioned?\(--package \| -p\)?
    read packageNameAlias
    echo What is the specific major.minor.patch.build version number to represent this package version?\( --versionnumber \| -n\)
    read versionNumber
    echo sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --versionnumber $versionNumber --installationkeybypass --wait 120 --codecoverage
    time sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --versionnumber $versionNumber --installationkeybypass --wait 120 --codecoverage
}

dx-report-package-version() {
    echo What is the package version creation report Id? \( -i, --packagecreaterequestid \)
    read PACKAGE_VERSION_ID
    echo What is the DevHub username/alias? \( -v, --targetdevhubusername \)
    read DEVHUB_ALIAS
    echo sfdx force:package:version:create:report -i $PACKAGE_VERSION_ID -v $DEVHUB_ALIAS
    time sfdx force:package:version:create:report -i $PACKAGE_VERSION_ID -v $DEVHUB_ALIAS
}

dx-create-package-version-validate() {
    echo What is the DevHub alias/username\(--targetdevhubusername \| -v\) for the ORG?
    read targetdevhubusername
    echo What is the package alias being versioned?\(--package \| -p\)?
    read packageNameAlias
    echo sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkeybypass --codecoverage --wait 100 
    time sfdx force:package:version:create --targetdevhubusername $targetdevhubusername --package $packageNameAlias --installationkeybypass --codecoverage --wait 100 
}


dx-create-data-user() {
    # Required fields are missing: [Alias, TimeZoneSidKey, LocaleSidKey, EmailEncodingKey, ProfileId, LanguageLocaleKey
    echo First Name?
    read firstName
    echo Last Name?
    read lastName
    echo Email?
    read email
    username="${email}un"
    echo sfdx force:data:record:create --sobjecttype User --perflog --json --values=="FirstName='$firstName' \
         LastName='$lastName' \
         Alias='$alias' \
         Email='$email' \
         Username='$username' \
         Nickname='$alias' "
    time sfdx force:data:record:create --sobjecttype User --perflog --json --values="FirstName='$firstName' LastName='$lastName' Email='$email' Username='$username'"
}

dx-assign-permset() {
    echo What is the alias/username\(-u, targetusername \) for the ORG?
    read TARGET_USERNAME
    echo What is the name of the Permission Set\(s\) -- use comma to separate -- to assign for this user? \( -n, --permsetname \)
    read PERMISSIONSET_NAME
    echo sfdx force:user:permset:assign --permsetname $PERMISSIONSET_NAME --targetusername $TARGET_USERNAME
    time sfdx force:user:permset:assign --permsetname $PERMISSIONSET_NAME --targetusername $TARGET_USERNAME
}

dx-quickdeploy-permsets-dx() {
    echo ORG username or alias to deploy to?
    read targetusername
    echo sfdx force:source:deploy --sourcepath "/c/git/QUICKMETADATA/permissionsets/dx" --targetusername $targetusername
    time sfdx force:source:deploy --sourcepath "/c/git/QUICKMETADATA/permissionsets/dx" --targetusername $targetusername
}

dx-deploy-manifest() {
    echo What is the ORG username or alias to deploy to?
    read targetusername
    time sfdx force:source:deploy -x path/to/package.xml
}

dx-deploy-checkonly() {
    echo What is the ORG username or alias to deploy to? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo Where is the Source Directory located? \( --sourcepath \| -p \)
    read SOURCE_DIRECTORY
    echo sfdx force:source:deploy --sourcepath $SOURCE_DIRECTORY --targetusername $TARGET_USERNAME --checkonly
    time sfdx force:source:deploy --sourcepath $SOURCE_DIRECTORY --targetusername $TARGET_USERNAME --checkonly
}

dx-deploy() {
    echo What is the ORG username or alias to deploy to? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo Where is the Source Directory located? \( --sourcepath \| -p \)
    read SOURCE_DIRECTORY
    echo sfdx force:source:deploy --sourcepath $SOURCE_DIRECTORY --targetusername $TARGET_USERNAME
    time sfdx force:source:deploy --sourcepath $SOURCE_DIRECTORY --targetusername $TARGET_USERNAME 
}

dx-deploy-path() {
    echo What is the ORG username or alias to deploy to? \( --targetusername, -u \)
    read TARGET_USERNAME
    echo What path contains the source metadata to deploy? \(--sourcepath, -p \)
    read -e SOURCEPATH
    echo sfdx force:source:deploy --targetusername $TARGET_USERNAME --sourcepath $SOURCEPATH
    time sfdx force:source:deploy --targetusername $TARGET_USERNAME --sourcepath $SOURCEPATH
}

dx-validate-deploy-path() {
    echo What is the ORG username or alias to deploy to? \( --targetusername, -u \)
    read TARGET_USERNAME
    echo What path contains the source metadata to deploy? \(--sourcepath, -p \)
    read -e SOURCEPATH
    echo sfdx force:source:deploy --targetusername $TARGET_USERNAME --sourcepath $SOURCEPATH --checkonly
    time sfdx force:source:deploy --targetusername $TARGET_USERNAME --sourcepath $SOURCEPATH --checkonly
}

dx-pull() {
    echo sfdx force:source:pull 
    time sfdx force:source:pull
}

dx-pull-force() {
    echo sfdx force:source:pull -f 
    time sfdx force:source:pull -f
}

dx-pull-by-alias() {
    echo What is the username or alias to source pull from? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo sfdx force:source:pull --targetusername $TARGET_USERNAME
    time sfdx force:source:pull --targetusername $TARGET_USERNAME
}

dx-pull-default() {
    echo sfdx force:source:pull
    time sfdx force:source:pull
}

dx-push-by-alias() {
    echo What is the username or alias to source push to? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo sfdx force:source:push --targetusername $TARGET_USERNAME
    time sfdx force:source:push --targetusername $TARGET_USERNAME
}

dx-push() {
    echo sfdx force:source:push 
    time sfdx force:source:push
}

dx-push-force() {
    echo sfdx force:source:push -f 
    time sfdx force:source:push -f
}

dx-show-revisions() {
    echo sfdx force:data:soql:query -q "SELECT MemberName, MemberType, RevisionCounter FROM SourceMember" -t
    time sfdx force:data:soql:query -q "SELECT MemberName, MemberType, RevisionCounter FROM SourceMember" -t
}

dx-reset-to-revision() {
    echo What is the alias of the scratch org to reset? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo sfdx force:source:tracking:reset --targetusername  $TARGET_USERNAME
    time sfdx force:source:tracking:reset --targetusername  $TARGET_USERNAME
}

dx-reset-full-by-alias() {
    echo What revision would you like to reset to? \( --revision \| -r \)
    read REVISION
    echo sfdx force:source:tracking:reset --revision $REVISION
    time sfdx force:source:tracking:reset --revision $REVISION
}


sfdmu-org2org() {
    echo What is the username or alias to get data from? \( -s, --sourceusername \)
    read SOURCE_USERNAME
    echo What is the username or alias to move the exported data to? \( -u, --targetusername \)
    read TARGET_USERNAME
    echo sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername $TARGET_USERNAME --noprompt
    sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername $TARGET_USERNAME --noprompt
}

sfdmu-csvfile2org() {
    echo What is the username or alias to move the exported data to? \( -u, --targetusername \)
    read TARGET_USERNAME
    echo sfdx sfdmu:run --sourceusername csvfile --targetusername $TARGET_USERNAME --noprompt
    sfdx sfdmu:run --sourceusername csvfile --targetusername $TARGET_USERNAME --noprompt
}

sfdmu-csvfile2Org-path() {
    echo What path are the csvfile files in? \(-p, --path \)
    read -e SOURCEPATH
    echo What is the username or alias to move the exported data to? \( -u, --targetusername \)
    read TARGET_USERNAME
    echo sfdx sfdmu:run --sourceusername csvfile --targetusername $TARGET_USERNAME --path "$SOURCEPATH" --noprompt
    sfdx sfdmu:run --sourceusername csvfile --targetusername $TARGET_USERNAME --path "$SOURCEPATH" --noprompt
}

sfdmu-csvfileFromOrg-path() {
    echo What path is the export json instructions file in? \(-p, --path \)
    read -e SOURCEPATH
    echo What is the username or alias to get csv data from? \( -s, --sourceusername \)
    read SOURCE_USERNAME
    echo sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername csvfile --path "$SOURCEPATH" --noprompt 
    sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername csvfile --path "$SOURCEPATH" --noprompt
}

sfdmu-csvfileFromOrg() {
    echo What path is the export json instructions file in? \(-p, --path \)
    read -e SOURCEPATH
    echo What is the username or alias to get csv data from? \( -s, --sourceusername \)
    read SOURCE_USERNAME
    echo sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername csvfile --noprompt 
    sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername csvfile --noprompt
}


sfdmu-org2org-path() {
    echo What path is the export json instructions file in? \(-p, --path \)
    read -e SOURCEPATH
    echo What is the username or alias to get data from? \( -s, --sourceusername \)
    read SOURCE_USERNAME
    echo What is the username or alias to move the exported data to? \( -u, --targetusername \)
    read TARGET_USERNAME
    echo sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername $TARGET_USERNAME --path "$SOURCEPATH" --noprompt
    sfdx sfdmu:run --sourceusername $SOURCE_USERNAME --targetusername $TARGET_USERNAME --path "$SOURCEPATH" --noprompt
}



dxgitconfigalias(){
    git config sf-va-dev-environment.alias $1
}

dx-delete-auth() {
    echo What alias/username for an authentication do you want to delete? \( --targetusername, -u \)
    read TARGET_USERNAME
    echo sfdx force:auth:logout -u $TARGET_USERNAME
    time sfdx force:auth:logout -u $TARGET_USERNAME
}

dx-delete-scratch() {
    echo What scratch org do you want to delete by alias/username? \( --targetusername, -u \)
    read TARGET_USERNAME
    echo sfdx force:org:delete -u $TARGET_USERNAME
    time sfdx force:org:delete -u $TARGET_USERNAME
}

#sfdx Salesforce DX Aliases Functions
lwc-debug-byghconfig() {
    aliasAssociatedUserName=$(git config sf-va-dev-environment.user-name-value)
    alias=$(git config sf-va-dev-environment.alias)
    time sfdx force:data:record:update --sobjecttype=User --where="Username="$aliasAssociatedUserName"" --values="UserPreferencesUserDebugModePref=$1"
}

lwc-debug() {
    time sfdx force:data:record:update --sobjecttype=User --where="Username="$1"" --values="UserPreferencesUserDebugModePref=$2"
}

dx-auth-custom() {
    echo What is the custom url\(--instanceurl\)?
    read customUrl
    echo What is the alias\(--setalias\) for this custom url authorization?
    read alias
    echo sfdx auth:web:login --setalias $alias --instanceurl "$customUrl"
    sfdx auth:web:login --setalias $alias --instanceurl "$customUrl"
}

dx-auth-device() {
    echo What is the custom url\(--instanceurl\)?
    read customUrl
    echo What is the alias\(--setalias\) for this custom url authorization?
    read alias
    echo sfdx auth:device:login -r "$customUrl" -a $alias
    sfdx auth:device:login -r "$customUrl" -a $alias

}

dx-auth-jwt() {
    echo What is the instance url\(--instanceurl\)?
    read instanceUrl 
    echo What is the client Id\(--clientid\)?
    echo \(This is the Consumer Key of the Connected App\)
    read clientId 
    echo What is the key path\(--jwtkeyfile\)?
    echo \(The local jwt file that aligns with the digital signature in the Connected App\)
    read -e jwtkeyFilePath
    echo What is the username\(--username\)?
    read username
    echo What is the alias\(--setalias\)?
    read alias
    echo sfdx auth:jwt:grant --clientid $clientId --username $username --setalias $alias --setdefaultdevhubusername --jwtkeyfile $jwtkeyFilePath --instanceurl $instanceUrl
    sfdx auth:jwt:grant --clientid $clientId --username $username --setalias $alias --setdefaultdevhubusername --jwtkeyfile $jwtkeyFilePath --instanceurl $instanceUrl
}

dx-codescan() {
    echo What is directory path to perform the code scan against? \( -t, --target \)
    read -e CODESCAN_DIRECTORY_PATH
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    resultsDirectory=scanresults/datetime_"$dateAndTime"
    mkdir -p "$resultsDirectory"
    echo "sfdx scanner:run -o "$resultsDirectory"/scannerresults_"$dateAndTime".csv -f csv -t=$CODESCAN_DIRECTORY_PATH"
    sfdx scanner:run -o "$resultsDirectory"/scannerresults_"$dateAndTime".csv -f csv -t=$CODESCAN_DIRECTORY_PATH
}

dx-test-method () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "Enter test parameter.. in format: ClassName.MethodName"
    read TEST_PARAM
    echo sfdx force:apex:test:run --resultformat human --loglevel error --tests $TEST_PARAM --targetusername $ORG_ALIAS_OR_USERNAME
    time sfdx force:apex:test:run --resultformat human --loglevel error --tests $TEST_PARAM --targetusername $ORG_ALIAS_OR_USERNAME
}

dx-test-method-codecoverage () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "Enter test parameter.. in format: ClassName.MethodName"
    read TEST_PARAM
    echo sfdx force:apex:test:run --resultformat human --loglevel error --tests $TEST_PARAM --codecoverage --resultformat human --targetusername $ORG_ALIAS_OR_USERNAME
    time sfdx force:apex:test:run --resultformat human --loglevel error --tests $TEST_PARAM --codecoverage --resultformat human --targetusername $ORG_ALIAS_OR_USERNAME
}

dx-test-suite () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "What is the suitename to test? If there are multiple test suites, provide a comma separated list like 'TestSuiteOne,TestSuiteTwo' \( --suitenames, -s \)"
    read SUITE_NAMES
    echo sfdx force:apex:test:run --resultformat human --loglevel error --suitenames $SUITE_NAMES --targetusername $ORG_ALIAS_OR_USERNAME
    time sfdx force:apex:test:run --resultformat human --loglevel error --suitenames $SUITE_NAMES --targetusername $ORG_ALIAS_OR_USERNAME
}

dx-test-suite-codecoverage () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "What is the suitename to test? If there are multiple test suites, provide a comma separated list like 'TestSuiteOne,TestSuiteTwo' \( --suitenames, -s \)"
    read SUITE_NAMES
    echo sfdx force:apex:test:run --resultformat human --loglevel error --suitenames $SUITE_NAMES --targetusername $ORG_ALIAS_OR_USERNAME --codecoverage --resultformat human
    time sfdx force:apex:test:run --resultformat human --loglevel error --suitenames $SUITE_NAMES --targetusername $ORG_ALIAS_OR_USERNAME --codecoverage --resultformat human
}

dx-test-classes () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "What is the class name to test? If there are multiple test classes, provide a comma separated list like 'TestClassOne,TestClassTwo' \( --classnames, -n \)"
    read CLASS_NAMES
    echo sfdx force:apex:test:run --classnames \"$CLASS_NAMES\" --loglevel error --targetusername $ORG_ALIAS_OR_USERNAME 
    time sfdx force:apex:test:run --classnames \"$CLASS_NAMES\" --loglevel error --targetusername $ORG_ALIAS_OR_USERNAME 
}

dx-test-classes-codecoverage () {
    echo "What alias/username do you want to run the test against? \( --targetusername, -u \)"
    read ORG_ALIAS_OR_USERNAME
    echo "What is the class name to test? If there are multiple test classes, provide a comma separated list like 'TestClassOne,TestClassTwo' \( --classnames, -n \)"
    read CLASS_NAMES
    echo sfdx force:apex:test:run --classnames \"$CLASS_NAMES\" --loglevel error --targetusername $ORG_ALIAS_OR_USERNAME --codecoverage --resultformat human
    time sfdx force:apex:test:run --classnames \"$CLASS_NAMES\" --loglevel error --targetusername $ORG_ALIAS_OR_USERNAME --codecoverage --resultformat human
}


dx-test-all() {
    echo What alias/username for an authentication do you want to delete? \( --targetusername, -u \)
    read TARGET_USERNAME
    test_result = $(time sfdx force:apex:test:run -u $TARGET_USERNAME --json --resultformat human --wait 3 --testlevel RunLocalTests)
    echo test_result
}

dx-report-test () {
    echo What is the test run Id \( -i \)?
    read TEST_RUN_ID
    time sfdx force:apex:test:report -i $TEST_RUN_ID
}

dxcc () {
    time sfdx force:data:soql:query --query  "SELECT NumLinesCovered, NumLinesUncovered, ApexClassOrTrigger.Name FROM ApexCodeCoverage WHERE ApexClassOrTrigger.Name in ('$1')" --usetoolingapi
}

dxqtflag () {
    sfUserNameFromGitConfig=$()
    userId=$(time sfdx force:data:soql:query --query "SELECT Id FROM User WHERE LogType='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE'" --usetoolingapi)
    results=$(time sfdx force:data:soql:query --query "SELECT debuglevelid FROM TraceFlag WHERE LogType='DEVELOPER_LOG' AND TracedEntityId='005t0000001yHw2AAE'" --usetoolingapi)
    # time sfdx force:data:soql:query --query "SELECT ID FROM TraceFlag LIMIT 10" 
    # tracedenttiyid is user
}

dx-create-debuglevel-finest-by-alias() {
    echo What alias/username for target org? \( --targetusername, -u \)
    read TARGET_ALIAS
    echo sfdx force:data:record:create --sobjecttype DebugLevel --values "MasterLabel='FINEST ALL' DeveloperName='FINEST_ALL' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'"  --usetoolingapi --json -u $TARGET_ALIAS --loglevel fatal
    time sfdx force:data:record:create --sobjecttype DebugLevel --values "MasterLabel='FINEST ALL' DeveloperName='FINEST_ALL' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'"  --usetoolingapi --json -u $TARGET_ALIAS --loglevel fatal
}

dx-create-debuglevel-finest() {
    echo sfdx force:data:record:create --sobjecttype DebugLevel --values "MasterLabel='FINEST ALL' DeveloperName='FINEST_ALL' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'"  --usetoolingapi --json --loglevel fatal
    time sfdx force:data:record:create --sobjecttype DebugLevel --values "MasterLabel='FINEST ALL' DeveloperName='FINEST_ALL' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'"  --usetoolingapi --json --loglevel fatal
}

dx-debug-create-and-trace-debug-level(){
    debug_results=$(time sfdx force:data:soql:query -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json)
    echo $debug_results
    debug_level_id=$(echo $debug_results | jq -r '.result.records[0].Id')
    user_alias_results=$(time sfdx force:data:soql:query -q "Select Id ,Alias from User WHERE Alias='UUser'" --loglevel trace --resultformat=json)
    user_id=$(echo $user_alias_results | jq -r '.result.records[0].Id')
    echo $user_alias_results
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    echo sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
    time sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' TracedEntityId='$user_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
}

dx-debug-create-trace-by-default-scratch() {
    dx-debug-create-debuglevel-finest
    echo sfdx force:data:soql:query -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json
    debug_results=$(time sfdx force:data:soql:query -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json)
    echo $debug_results
    debug_level_id=$(echo $debug_results | jq -r '.result.records[0].Id')
    user_alias_results=$(time sfdx force:data:soql:query -q "Select Id ,Alias from User WHERE Alias='UUser'" --loglevel trace --resultformat=json)
    user_id=$(echo $user_alias_results | jq -r '.result.records[0].Id')
    echo $user_alias_results
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    echo sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
    time sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' TracedEntityId='$user_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
}

dx-debug-create-trace-by-username() {
    echo What is the Username to begin tracing debug logs for? 
    read USERNAME
    echo sfdx force:data:soql:query -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json
    debug_results=$(time sfdx force:data:soql:query -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json)
    echo $debug_results
    debug_level_id=$(echo $debug_results | jq -r '.result.records[0].Id')
    user_alias_results=$(time sfdx force:data:soql:query -q "Select Id ,Alias from User WHERE Username='$USERNAME'" --loglevel trace --resultformat=json)
    user_id=$(echo $user_alias_results | jq -r '.result.records[0].Id')
    echo $user_alias_results
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    echo sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
    time sfdx force:data:record:create --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' TracedEntityId='$user_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
}

dx-debug-create-trace-by-username-and-org-alias(){
    echo What is the alias of the org to begin debugging against? \( --targetusername \| -u \)
    read TARGET_USERNAME
    echo What is the Username to begin tracing debug logs for? 
    read USERNAME
    echo sfdx force:data:soql:query -u $TARGET_USERNAME -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json
    debug_results=$(time sfdx force:data:soql:query -u $TARGET_USERNAME -q "select Id, DeveloperName From DebugLevel Where DeveloperName = 'FINEST_ALL'" --usetoolingapi --loglevel trace --resultformat=json)
    echo $debug_results
    debug_level_id=$(echo $debug_results | jq -r '.result.records[0].Id')
    echo sfdx force:data:soql:query -u $TARGET_USERNAME -q "Select Id ,Alias from User WHERE Alias='$USERNAME'" --loglevel trace --resultformat=json 
    user_alias_results=$(time sfdx force:data:soql:query -u $TARGET_USERNAME -q "Select Id ,Alias from User WHERE Alias='$USERNAME'" --loglevel trace --resultformat=json)
    user_id=$(echo $user_alias_results | jq -r '.result.records[0].Id')
    echo $user_alias_results
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    echo sfdx force:data:record:create -u $TARGET_USERNAME --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
    time sfdx force:data:record:create -u $TARGET_USERNAME --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' DebugLevelId='$debug_level_id' TracedEntityId='$user_id' LogType='DEVELOPER_LOG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
}

dxlogstart () {
    # yest=$(date --date="today + 23 hours" +"%d/%m/%Y/%h/%mm" +"%Y-%m-%dT%H:%M:%SZ")
    notQuite24Hours=$(date --date="today + 23 hours" +"%Y-%m-%dT%H:%M:%SZ")
    echo "$notQuite24Hours"
    funcYest="$(dxqtflag)"
    echo $funcYest
    time sfdx force:data:record:create -u funq-test-2 --sobjecttype TraceFlag --values "StartDate='' ExpirationDate='$notQuite24Hours' LogType='USER_DEBUG' System='Fine' Nba='Fine' Wave='Finest' ApexCode='Finest' Database='Finest' Workflow='Finer' Validation='Info' Callout='Finest' ApexProfiling='Finest'" --usetoolingapi --json --loglevel fatal
}

dx-query() {
    time sfdx force:data:soql:query -q "$1"
}

dx-query-csv() {
    echo What is the username/alias \(--username \| -u\) where this soql will be run against?
    read alias
    echo What is the query?
    read query
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    queryResultsDirectory=queryResults
    mkdir -p "$queryResultsDirectory"
    fileName="$queryResultsDirectory"/"$dateAndTime".csv
    results=$(time sfdx force:data:soql:query -q "$query" -r csv -u $alias) 
    echo "$results" > "$fileName"
    start $fileName
}

dx-query-json() {
    echo What is the username/alias \(--username \| -u\) where this soql will be run against?
    read alias
    echo What is the query?
    read query
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    queryResultsDirectory=queryResults
    mkdir -p "$queryResultsDirectory"
    fileName="$queryResultsDirectory"/"$dateAndTime".json
    results=$(time sfdx force:data:soql:query -q "$query" -r json -u $alias) 
    echo "$results" > "$fileName"
    code $fileName
}

dx-query-tooling-csv() {
    echo What is the username/alias \(--username \| -u\) where this soql will be run against?
    read alias
    echo What is the query?
    read query
    dateAndTime=$(date --date="today" +"%Y%m%d_%H%M%SZ")
    echo "$dateAndTime"
    queryResultsDirectory=queryResults
    mkdir -p "$queryResultsDirectory"
    fileName="$queryResultsDirectory"/"$dateAndTime".csv
    results=$(time sfdx force:data:soql:query --usetoolingapi -q "$query" -r csv -u $alias) 
    echo "$results" > "$fileName"
}

dx-getfields-by-object() {
    echo What is the API Name of the object to get fields for?
    read API_OBJECT_NAME
    echo sfdx shane:object:fields:describe -o $API_OBJECT_NAME
    sfdx shane:object:fields:describe -o $API_OBJECT_NAME
}

